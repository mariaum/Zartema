From 4eb98392b1dd26a4b20a4a9bfddd30eb456d6040 Mon Sep 17 00:00:00 2001
From: mariaum <me@mariaum.com>
Date: Tue, 5 Nov 2024 17:25:50 -0300
Subject: [PATCH] Update Netty.


diff --git a/pom.xml b/pom.xml
index 60a9cd8c8..f5407e5dc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -48,7 +48,7 @@
             <dependency>
                 <groupId>io.netty</groupId>
                 <artifactId>netty-bom</artifactId>
-                <version>4.1.115.Final</version>
+                <version>4.2.0.Beta1</version>
                 <type>pom</type>
                 <scope>import</scope>
             </dependency>
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 65ce43978..c5911555b 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -64,15 +64,13 @@
             <scope>compile</scope>
         </dependency>
         <dependency>
-            <groupId>io.netty.incubator</groupId>
-            <artifactId>netty-incubator-transport-native-io_uring</artifactId>
-            <version>0.0.25.Final</version>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-transport-native-io_uring</artifactId>
             <classifier>linux-x86_64</classifier>
         </dependency>
         <dependency>
-            <groupId>io.netty.incubator</groupId>
-            <artifactId>netty-incubator-transport-native-io_uring</artifactId>
-            <version>0.0.25.Final</version>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-transport-native-io_uring</artifactId>
             <classifier>linux-aarch_64</classifier>
         </dependency>
         <dependency>
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 061a519c3..6824e191a 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -8,30 +8,31 @@ import io.netty.channel.ChannelException;
 import io.netty.channel.ChannelFactory;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
+import io.netty.channel.IoHandlerFactory;
 import io.netty.channel.EventLoopGroup;
+import io.netty.channel.MultiThreadIoEventLoopGroup;
 import io.netty.channel.ServerChannel;
 import io.netty.channel.WriteBufferWaterMark;
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollDatagramChannel;
 import io.netty.channel.epoll.EpollDomainSocketChannel;
-import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollIoHandler;
 import io.netty.channel.epoll.EpollServerDomainSocketChannel;
 import io.netty.channel.epoll.EpollServerSocketChannel;
 import io.netty.channel.epoll.EpollSocketChannel;
-import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.nio.NioIoHandler;
 import io.netty.channel.socket.DatagramChannel;
 import io.netty.channel.socket.nio.NioDatagramChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.channel.socket.nio.NioSocketChannel;
 import io.netty.channel.unix.DomainSocketAddress;
+import io.netty.channel.uring.IoUring;
+import io.netty.channel.uring.IoUringDatagramChannel;
+import io.netty.channel.uring.IoUringIoHandler;
+import io.netty.channel.uring.IoUringServerSocketChannel;
+import io.netty.channel.uring.IoUringSocketChannel;
 import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;
 import io.netty.handler.timeout.ReadTimeoutHandler;
-import io.netty.handler.timeout.WriteTimeoutHandler;
-import io.netty.incubator.channel.uring.IOUring;
-import io.netty.incubator.channel.uring.IOUringDatagramChannel;
-import io.netty.incubator.channel.uring.IOUringEventLoopGroup;
-import io.netty.incubator.channel.uring.IOUringServerSocketChannel;
-import io.netty.incubator.channel.uring.IOUringSocketChannel;
 import io.netty.util.AttributeKey;
 import io.netty.util.internal.PlatformDependent;
 import java.net.SocketAddress;
@@ -138,7 +139,6 @@ public class PipelineUtils
     private static final ChannelAcceptor BASE_SERVERSIDE = new Base( true );
     private static final KickStringWriter legacyKicker = new KickStringWriter();
     public static final String TIMEOUT_HANDLER = "timeout";
-    public static final String WRITE_TIMEOUT_HANDLER = "write-timeout";
     public static final String PACKET_DECODER = "packet-decoder";
     public static final String PACKET_ENCODER = "packet-encoder";
     public static final String BOSS_HANDLER = "inbound-boss";
@@ -165,13 +165,13 @@ public class PipelineUtils
             // disable by default (experimental)
             if ( Boolean.parseBoolean( System.getProperty( "bungee.io_uring", "false" ) ) )
             {
-                ProxyServer.getInstance().getLogger().info( "Not on Windows, attempting to use enhanced IOUringEventLoopGroup" );
-                if ( io_uring = IOUring.isAvailable() )
+                ProxyServer.getInstance().getLogger().info( "Not on Windows, attempting to use enhanced IoUringEventLoopGroup" );
+                if ( io_uring = IoUring.isAvailable() )
                 {
                     ProxyServer.getInstance().getLogger().log( Level.WARNING, "io_uring is enabled and working, utilising it! (experimental feature)" );
                 } else
                 {
-                    ProxyServer.getInstance().getLogger().log( Level.WARNING, "io_uring is not working: {0}", Util.exception( IOUring.unavailabilityCause() ) );
+                    ProxyServer.getInstance().getLogger().log( Level.WARNING, "io_uring is not working: {0}", Util.exception( IoUring.unavailabilityCause() ) );
                 }
             }
 
@@ -190,16 +190,17 @@ public class PipelineUtils
 
         setChannelInitializerHolders();
         // Waterfall start: netty reflection -> factory
-        serverChannelFactory = io_uring ? IOUringServerSocketChannel::new : epoll ? EpollServerSocketChannel::new : NioServerSocketChannel::new;
-        serverChannelDomainFactory = io_uring ? IOUringServerSocketChannel::new : epoll ? EpollServerDomainSocketChannel::new : null;
-        channelFactory = io_uring ? IOUringSocketChannel::new : epoll ? EpollSocketChannel::new : NioSocketChannel::new;
-        channelDomainFactory = io_uring ? IOUringSocketChannel::new : epoll ? EpollDomainSocketChannel::new : null;
+        serverChannelFactory = io_uring ? IoUringServerSocketChannel::new : epoll ? EpollServerSocketChannel::new : NioServerSocketChannel::new;
+        serverChannelDomainFactory = io_uring ? IoUringServerSocketChannel::new : epoll ? EpollServerDomainSocketChannel::new : null;
+        channelFactory = io_uring ? IoUringSocketChannel::new : epoll ? EpollSocketChannel::new : NioSocketChannel::new;
+        channelDomainFactory = io_uring ? IoUringSocketChannel::new : epoll ? EpollDomainSocketChannel::new : null;
         // Waterfall end
     }
 
     public static EventLoopGroup newEventLoopGroup(int threads, ThreadFactory factory)
     {
-        return io_uring ? new IOUringEventLoopGroup( threads, factory ) : epoll ? new EpollEventLoopGroup( threads, factory ) : new NioEventLoopGroup( threads, factory );
+        IoHandlerFactory ioHandlerFactory = io_uring ? IoUringIoHandler.newFactory() : epoll ? EpollIoHandler.newFactory() : NioIoHandler.newFactory();
+        return new MultiThreadIoEventLoopGroup( threads, factory, ioHandlerFactory );
     }
 
     public static Class<? extends ServerChannel> getServerChannel(SocketAddress address)
@@ -211,7 +212,7 @@ public class PipelineUtils
             return EpollServerDomainSocketChannel.class;
         }
 
-        return io_uring ? IOUringServerSocketChannel.class : epoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class;
+        return io_uring ? IoUringServerSocketChannel.class : epoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class;
     }
 
     public static Class<? extends Channel> getChannel(SocketAddress address)
@@ -223,7 +224,7 @@ public class PipelineUtils
             return EpollDomainSocketChannel.class;
         }
 
-        return io_uring ? IOUringSocketChannel.class : epoll ? EpollSocketChannel.class : NioSocketChannel.class;
+        return io_uring ? IoUringSocketChannel.class : epoll ? EpollSocketChannel.class : NioSocketChannel.class;
     }
 
     // Waterfall start: netty reflection -> factory
@@ -256,7 +257,7 @@ public class PipelineUtils
 
     public static Class<? extends DatagramChannel> getDatagramChannel()
     {
-        return io_uring ? IOUringDatagramChannel.class : epoll ? EpollDatagramChannel.class : NioDatagramChannel.class;
+        return io_uring ? IoUringDatagramChannel.class : epoll ? EpollDatagramChannel.class : NioDatagramChannel.class;
     }
 
     private static final int LOW_MARK = Integer.getInteger( "net.md_5.bungee.low_mark", 2 << 18 ); // 0.5 mb
@@ -286,7 +287,6 @@ public class PipelineUtils
 
             ch.pipeline().addLast( FRAME_DECODER, new Varint21FrameDecoder() );
             ch.pipeline().addLast( TIMEOUT_HANDLER, new ReadTimeoutHandler( BungeeCord.getInstance().config.getTimeout(), TimeUnit.MILLISECONDS ) );
-            ch.pipeline().addLast( WRITE_TIMEOUT_HANDLER, new WriteTimeoutHandler( BungeeCord.getInstance().config.getTimeout(), TimeUnit.MILLISECONDS ) );
             // No encryption bungee -> server, therefore use extra buffer to avoid copying everything for length prepending
             // Not used bungee -> client as header would need to be encrypted separately through expensive JNI call
             // TODO: evaluate difference compose vs two buffers
-- 
2.34.1

